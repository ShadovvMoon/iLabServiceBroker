// Generated by CoffeeScript 1.6.1
(function() {
  var XMLFragment, _,
    __hasProp = {}.hasOwnProperty;

  _ = require('underscore');

  XMLFragment = (function() {

    function XMLFragment(parent, name, attributes, text) {
      this.isRoot = false;
      this.documentObject = null;
      this.parent = parent;
      this.name = name;
      this.attributes = attributes;
      this.value = text;
      this.children = [];
      this.instructions = [];
      this.stringify = parent.stringify;
    }

    XMLFragment.prototype.element = function(name, attributes, text) {
      var atts, child, key, val, _ref, _ref1;
      if (name == null) {
        throw new Error("Missing element name");
      }
      name = this.stringify.eleName(name);
      if (attributes == null) {
        attributes = {};
      }
      if (_.isString(attributes) && _.isObject(text)) {
        _ref = [text, attributes], attributes = _ref[0], text = _ref[1];
      } else if (_.isString(attributes)) {
        _ref1 = [{}, attributes], attributes = _ref1[0], text = _ref1[1];
      }
      atts = {};
      for (key in attributes) {
        if (!__hasProp.call(attributes, key)) continue;
        val = attributes[key];
        key = this.stringify.attName(key);
        val = this.stringify.attValue(val);
        if ((key != null) && (val != null)) {
          atts[key] = val;
        }
      }
      child = new XMLFragment(this, name, atts);
      if (text != null) {
        text = this.stringify.eleText(text);
        child.raw(text);
      }
      this.children.push(child);
      return child;
    };

    XMLFragment.prototype.insertBefore = function(name, attributes, text) {
      var atts, child, i, key, val, _ref, _ref1;
      if (this.isRoot) {
        throw new Error("Cannot insert elements at root level");
      }
      if (name == null) {
        throw new Error("Missing element name");
      }
      name = this.stringify.eleName(name);
      if (attributes == null) {
        attributes = {};
      }
      if (_.isString(attributes) && _.isObject(text)) {
        _ref = [text, attributes], attributes = _ref[0], text = _ref[1];
      } else if (_.isString(attributes)) {
        _ref1 = [{}, attributes], attributes = _ref1[0], text = _ref1[1];
      }
      atts = {};
      for (key in attributes) {
        if (!__hasProp.call(attributes, key)) continue;
        val = attributes[key];
        key = this.stringify.attName(key);
        val = this.stringify.attValue(val);
        if ((key != null) && (val != null)) {
          atts[key] = val;
        }
      }
      child = new XMLFragment(this.parent, name, atts);
      if (text != null) {
        text = this.stringify.eleText(text);
        child.raw(text);
      }
      i = this.parent.children.indexOf(this);
      this.parent.children.splice(i, 0, child);
      return child;
    };

    XMLFragment.prototype.insertAfter = function(name, attributes, text) {
      var atts, child, i, key, val, _ref, _ref1;
      if (this.isRoot) {
        throw new Error("Cannot insert elements at root level");
      }
      if (name == null) {
        throw new Error("Missing element name");
      }
      name = this.stringify.eleName(name);
      if (attributes == null) {
        attributes = {};
      }
      if (_.isString(attributes) && _.isObject(text)) {
        _ref = [text, attributes], attributes = _ref[0], text = _ref[1];
      } else if (_.isString(attributes)) {
        _ref1 = [{}, attributes], attributes = _ref1[0], text = _ref1[1];
      }
      atts = {};
      for (key in attributes) {
        if (!__hasProp.call(attributes, key)) continue;
        val = attributes[key];
        key = this.stringify.attName(key);
        val = this.stringify.attValue(val);
        if ((key != null) && (val != null)) {
          atts[key] = val;
        }
      }
      child = new XMLFragment(this.parent, name, atts);
      if (text != null) {
        text = this.stringify.eleText(text);
        child.raw(text);
      }
      i = this.parent.children.indexOf(this);
      this.parent.children.splice(i + 1, 0, child);
      return child;
    };

    XMLFragment.prototype.remove = function() {
      var i, _ref;
      if (this.isRoot) {
        throw new Error("Cannot remove the root element");
      }
      i = this.parent.children.indexOf(this);
      [].splice.apply(this.parent.children, [i, i - i + 1].concat(_ref = [])), _ref;
      return this.parent;
    };

    XMLFragment.prototype.text = function(value) {
      var child;
      if (value == null) {
        throw new Error("Missing element text");
      }
      value = this.stringify.eleText(value);
      child = new XMLFragment(this, '', {}, value);
      this.children.push(child);
      return this;
    };

    XMLFragment.prototype.cdata = function(value) {
      var child;
      if (value == null) {
        throw new Error("Missing CDATA text");
      }
      value = this.stringify.cdata(value);
      child = new XMLFragment(this, '', {}, value);
      this.children.push(child);
      return this;
    };

    XMLFragment.prototype.comment = function(value) {
      var child;
      if (value == null) {
        throw new Error("Missing comment text");
      }
      value = this.stringify.comment(value);
      child = new XMLFragment(this, '', {}, value);
      this.children.push(child);
      return this;
    };

    XMLFragment.prototype.raw = function(value) {
      var child;
      if (value == null) {
        throw new Error("Missing raw text");
      }
      value = this.stringify.raw(value);
      child = new XMLFragment(this, '', {}, value);
      this.children.push(child);
      return this;
    };

    XMLFragment.prototype.up = function() {
      if (this.isRoot) {
        throw new Error("This node has no parent. Use doc() if you need to get the document object.");
      }
      return this.parent;
    };

    XMLFragment.prototype.root = function() {
      var child;
      if (this.isRoot) {
        return this;
      }
      child = this.parent;
      while (!child.isRoot) {
        child = child.parent;
      }
      return child;
    };

    XMLFragment.prototype.document = function() {
      return this.root().documentObject;
    };

    XMLFragment.prototype.end = function(options) {
      return this.document().toString(options);
    };

    XMLFragment.prototype.prev = function() {
      var i;
      if (this.isRoot) {
        throw new Error("Root node has no siblings");
      }
      i = this.parent.children.indexOf(this);
      if (i < 1) {
        throw new Error("Already at the first node");
      }
      return this.parent.children[i - 1];
    };

    XMLFragment.prototype.next = function() {
      var i;
      if (this.isRoot) {
        throw new Error("Root node has no siblings");
      }
      i = this.parent.children.indexOf(this);
      if (i === -1 || i === this.parent.children.length - 1) {
        throw new Error("Already at the last node");
      }
      return this.parent.children[i + 1];
    };

    XMLFragment.prototype.clone = function(deep) {
      var clonedSelf;
      clonedSelf = new XMLFragment(this.parent, this.name, this.attributes, this.value);
      if (deep) {
        this.children.forEach(function(child) {
          var clonedChild;
          clonedChild = child.clone(deep);
          clonedChild.parent = clonedSelf;
          return clonedSelf.children.push(clonedChild);
        });
      }
      return clonedSelf;
    };

    XMLFragment.prototype.importXMLBuilder = function(xmlbuilder) {
      var clonedRoot;
      clonedRoot = xmlbuilder.root().clone(true);
      clonedRoot.parent = this;
      this.children.push(clonedRoot);
      clonedRoot.isRoot = false;
      return this;
    };

    XMLFragment.prototype.attribute = function(name, value) {
      var _ref;
      if (name == null) {
        throw new Error("Missing attribute name");
      }
      if (value == null) {
        throw new Error("Missing attribute value");
      }
      name = this.stringify.attName(name);
      value = this.stringify.attValue(value);
      if ((_ref = this.attributes) == null) {
        this.attributes = {};
      }
      this.attributes[name] = value;
      return this;
    };

    XMLFragment.prototype.removeAttribute = function(name) {
      if (name == null) {
        throw new Error("Missing attribute name");
      }
      name = this.stringify.attName(name);
      delete this.attributes[name];
      return this;
    };

    XMLFragment.prototype.instruction = function(target, value) {
      var pi;
      if (target == null) {
        throw new Error("Missing instruction target");
      }
      if (value == null) {
        value = '';
      }
      target = this.stringify.insTarget(target);
      value = this.stringify.insValue(value);
      pi = target;
      if (value) {
        pi += ' ';
      }
      pi += value;
      this.instructions.push(pi);
      return this;
    };

    XMLFragment.prototype.toString = function(options, level) {
      var attName, attValue, child, indent, instruction, newline, pretty, r, space, _i, _j, _len, _len1, _ref, _ref1, _ref2;
      pretty = (options != null) && options.pretty || false;
      indent = (options != null) && options.indent || '  ';
      newline = (options != null) && options.newline || '\n';
      level || (level = 0);
      space = new Array(level + 1).join(indent);
      r = '';
      _ref = this.instructions;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        instruction = _ref[_i];
        if (pretty) {
          r += space;
        }
        r += '<?' + instruction + '?>';
        if (pretty) {
          r += newline;
        }
      }
      if (pretty) {
        r += space;
      }
      if (this.value == null) {
        r += '<' + this.name;
      } else {
        r += '' + this.value;
      }
      _ref1 = this.attributes;
      for (attName in _ref1) {
        if (!__hasProp.call(_ref1, attName)) continue;
        attValue = _ref1[attName];
        if (this.name === '!DOCTYPE') {
          r += ' ' + attValue;
        } else {
          r += ' ' + attName + '="' + attValue + '"';
        }
      }
      if (this.children.length === 0) {
        if (this.value == null) {
          r += this.name === '?xml' ? '?>' : this.name === '!DOCTYPE' ? '>' : '/>';
        }
        if (pretty) {
          r += newline;
        }
      } else if (pretty && this.children.length === 1 && (this.children[0].value != null)) {
        r += '>';
        r += this.children[0].value;
        r += '</' + this.name + '>';
        r += newline;
      } else {
        r += '>';
        if (pretty) {
          r += newline;
        }
        _ref2 = this.children;
        for (_j = 0, _len1 = _ref2.length; _j < _len1; _j++) {
          child = _ref2[_j];
          r += child.toString(options, level + 1);
        }
        if (pretty) {
          r += space;
        }
        r += '</' + this.name + '>';
        if (pretty) {
          r += newline;
        }
      }
      return r;
    };

    XMLFragment.prototype.ele = function(name, attributes, text) {
      return this.element(name, attributes, text);
    };

    XMLFragment.prototype.txt = function(value) {
      return this.text(value);
    };

    XMLFragment.prototype.dat = function(value) {
      return this.cdata(value);
    };

    XMLFragment.prototype.att = function(name, value) {
      return this.attribute(name, value);
    };

    XMLFragment.prototype.com = function(value) {
      return this.comment(value);
    };

    XMLFragment.prototype.ins = function(target, value) {
      return this.instruction(target, value);
    };

    XMLFragment.prototype.doc = function() {
      return this.document();
    };

    XMLFragment.prototype.e = function(name, attributes, text) {
      return this.element(name, attributes, text);
    };

    XMLFragment.prototype.t = function(value) {
      return this.text(value);
    };

    XMLFragment.prototype.d = function(value) {
      return this.cdata(value);
    };

    XMLFragment.prototype.a = function(name, value) {
      return this.attribute(name, value);
    };

    XMLFragment.prototype.c = function(value) {
      return this.comment(value);
    };

    XMLFragment.prototype.i = function(target, value) {
      return this.instruction(target, value);
    };

    XMLFragment.prototype.r = function(value) {
      return this.raw(value);
    };

    XMLFragment.prototype.u = function() {
      return this.up();
    };

    return XMLFragment;

  })();

  module.exports = XMLFragment;

}).call(this);
