// Generated by CoffeeScript 1.6.1
(function() {
  var XMLBuilder, XMLFragment, XMLStringifier, _;

  _ = require('underscore');

  XMLFragment = require('./XMLFragment');

  XMLStringifier = require('./XMLStringifier');

  XMLBuilder = (function() {

    function XMLBuilder(name, xmldec, doctype, options) {
      var child, decatts, docatts, root;
      if (name == null) {
        throw new Error("Root element needs a name");
      }
      this.children = [];
      this.rootObject = null;
      options = _.extend({
        'version': '1.0'
      }, xmldec, doctype, options);
      this.stringify = new XMLStringifier(options);
      name = this.stringify.eleName(name);
      if (!(options != null ? options.headless : void 0)) {
        decatts = {};
        if (options.version != null) {
          decatts.version = this.stringify.xmlVersion(options.version);
        }
        if (options.encoding != null) {
          decatts.encoding = this.stringify.xmlEncoding(options.encoding);
        }
        if (options.standalone != null) {
          decatts.standalone = this.stringify.xmlStandalone(options.standalone);
        }
        child = new XMLFragment(this, '?xml', decatts);
        this.children.push(child);
        docatts = {};
        if (options.ext != null) {
          docatts.ext = this.stringify.xmlExternalSubset(options.ext);
        }
        if (!_.isEmpty(docatts)) {
          docatts.name = name;
          child = new XMLFragment(this, '!DOCTYPE', docatts);
          this.children.push(child);
        }
      }
      root = new XMLFragment(this, name, {});
      root.isRoot = true;
      root.documentObject = this;
      this.children.push(root);
      this.rootObject = root;
    }

    XMLBuilder.prototype.root = function() {
      return this.rootObject;
    };

    XMLBuilder.prototype.end = function(options) {
      return toString(options);
    };

    XMLBuilder.prototype.toString = function(options) {
      var child, r, _i, _len, _ref;
      r = '';
      _ref = this.children;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        child = _ref[_i];
        r += child.toString(options);
      }
      return r;
    };

    return XMLBuilder;

  })();

  module.exports = XMLBuilder;

}).call(this);
